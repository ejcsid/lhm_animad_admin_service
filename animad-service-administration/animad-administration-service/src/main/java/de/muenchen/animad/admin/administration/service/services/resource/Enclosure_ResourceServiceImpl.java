package de.muenchen.animad.admin.administration.service.services.resource;

import de.muenchen.animad.admin.administration.service.gen.domain.Animal_;
import org.springframework.hateoas.Resource;
import org.springframework.stereotype.Service;

import de.muenchen.animad.admin.administration.service.gen.domain.Enclosure_;
import de.muenchen.animad.admin.administration.service.gen.services.resource.Enclosure_ResourceService;
import static de.muenchen.vaadin.demo.apilib.hateoas.HateoasUtil.links;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.hateoas.EntityLinks;
import org.springframework.hateoas.LinkBuilder;

/*
 * This file will NOT be overwritten by GAIA.
 * This file was automatically generated by GAIA.
 */
/**
 * Provides methods to alter resources before being sent to a client. If used as
 * generated by GAIA this service will be autowired and called by
 * Enclosure_ResourceProcessor.
 */
@Service
public class Enclosure_ResourceServiceImpl implements Enclosure_ResourceService {
    // If you need access to the database you can autowire a Repository.
    // Repositories are generated into the package: .gen.rest
    //
    // @Autowired
    // <EntityName>Repository repo;
    
    @Autowired
    EntityLinks links;

    /**
     * Process a resource. You can add links and alter the entity itself. When
     * used as generated by GAIA this method will be called whenever a resource
     * is sent to a client.
     */
    public Resource<Enclosure_> process(Resource<Enclosure_> resource) {
        LinkBuilder builder = links.linkFor(Animal_.class);
        resource.add(builder.withRel("animals"));

        // Implement your logic here.
        return resource;
    }
}
